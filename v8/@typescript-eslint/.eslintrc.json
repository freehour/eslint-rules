{
    "rules": {
        /**
         * @description: rules for typescript
         * @see: https://typescript-eslint.io/rules/#supported-rules
         * @version 7.8.0
         */

        "@typescript-eslint/adjacent-overload-signatures": "warn",
        "@typescript-eslint/array-type": "warn",
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": "error",
        "@typescript-eslint/ban-tslint-comment": "error",
        "@typescript-eslint/ban-types": [
            "error",
            {
                "types": {
                    "object": false
                }
            }
        ],
        "@typescript-eslint/class-literal-property-style": "warn",
        "@typescript-eslint/consistent-generic-constructors": "warn",
        "@typescript-eslint/consistent-indexed-object-style": "warn",
        "@typescript-eslint/consistent-type-assertions": "warn",
        "@typescript-eslint/consistent-type-definitions": "warn",
        "@typescript-eslint/consistent-type-exports": "warn",
        "@typescript-eslint/consistent-type-imports": "warn",
        "@typescript-eslint/explicit-function-return-type": [
            "warn",
            {
                "allowTypedFunctionExpressions": true
            }
        ],
        "@typescript-eslint/explicit-member-accessibility": [
            "warn",
            {
                "accessibility": "no-public"
            }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "error",
        // "@typescript-eslint/member-ordering": "warn",
        "@typescript-eslint/method-signature-style": "warn",
        // "@typescript-eslint/naming-convention": "warn",
        "@typescript-eslint/no-array-delete": "error",
        "@typescript-eslint/no-base-to-string": "warn",
        "@typescript-eslint/no-confusing-non-null-assertion": "warn",
        "@typescript-eslint/no-confusing-void-expression": [
            "warn",
            {
                "ignoreArrowShorthand": true
            }
        ],
        "@typescript-eslint/no-duplicate-enum-values": "warn",
        "@typescript-eslint/no-duplicate-type-constituents": "warn",
        "@typescript-eslint/no-dynamic-delete": "warn",
        // "@typescript-eslint/no-empty-interface": "warn",
        // "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-extraneous-class": "warn",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-import-type-side-effects": "warn",
        "@typescript-eslint/no-inferrable-types": "warn",
        "@typescript-eslint/no-invalid-void-type": "warn",
        "@typescript-eslint/no-meaningless-void-operator": "warn",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/no-mixed-enums": "warn",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "warn",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-redundant-type-constituents": "warn",
        "@typescript-eslint/no-require-imports": "warn",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
        "@typescript-eslint/no-unnecessary-condition": "warn",
        "@typescript-eslint/no-unnecessary-qualifier": "warn",
        "@typescript-eslint/no-unnecessary-type-arguments": "warn",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        // "@typescript-eslint/no-unsafe-argument": "error",
        // "@typescript-eslint/no-unsafe-assignment": "error",
        // "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-declaration-merging": "error",
        "@typescript-eslint/no-unsafe-enum-comparison": "error",
        // "@typescript-eslint/no-unsafe-member-access": "error",
        // "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/no-unsafe-unary-minus": "error",
        "@typescript-eslint/no-useless-empty-export": "warn",
        "@typescript-eslint/no-useless-template-literals": "warn",
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/non-nullable-type-assertion-style": "warn",
        "@typescript-eslint/parameter-properties": [
            "warn",
            {
                // it requires a bit more typing, but it is easier to see all the class properties
                "prefer": "class-property"
            }
        ],
        "@typescript-eslint/prefer-as-const": "error",
        "@typescript-eslint/prefer-enum-initializers": "warn",
        "@typescript-eslint/prefer-find": "warn",
        "@typescript-eslint/prefer-for-of": "warn",
        "@typescript-eslint/prefer-function-type": "warn",
        "@typescript-eslint/prefer-includes": "warn",
        "@typescript-eslint/prefer-literal-enum-member": "warn",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "warn",
        "@typescript-eslint/prefer-optional-chain": "warn",
        "@typescript-eslint/prefer-readonly": "warn",
        // "@typescript-eslint/prefer-readonly-parameter-types": "warn", // <--------- best bractice?
        "@typescript-eslint/prefer-reduce-type-parameter": "warn",
        "@typescript-eslint/prefer-regexp-exec": "warn",
        "@typescript-eslint/prefer-return-this-type": "warn",
        "@typescript-eslint/prefer-string-starts-ends-with": "warn",
        "@typescript-eslint/prefer-ts-expect-error": "warn",
        "@typescript-eslint/promise-function-async": "warn",
        "@typescript-eslint/require-array-sort-compare": "warn",
        // "@typescript-eslint/restrict-plus-operands": "error",
        // "@typescript-eslint/restrict-template-expressions": "error",
        // "@typescript-eslint/sort-type-constituents": "warn",
        "@typescript-eslint/strict-boolean-expressions": "warn",
        "@typescript-eslint/switch-exhaustiveness-check": "warn",
        "@typescript-eslint/triple-slash-reference": "error",
        // "@typescript-eslint/typedef": "warn",
        "@typescript-eslint/unbound-method": [
            "error",
            {
                "ignoreStatic": true
            }
        ],
        "@typescript-eslint/unified-signatures": "warn",
        // "@typescript-eslint/use-unknown-in-catch-callback-variable": "warn",


        /**
         * @description: rules for typescript as extensions of existing eslint rules
         * @see: https://typescript-eslint.io/rules/#extension-rules
         * @version 7.8.0
         */

        // "@typescript-eslint/class-methods-use-this": "warn",
        // "@typescript-eslint/consistent-return": "warn",
        "@typescript-eslint/default-param-last": "error",
        "@typescript-eslint/dot-notation": [
            "error",
            {
                "allowIndexSignaturePropertyAccess": true
            }
        ],
        // "@typescript-eslint/init-declarations": "warn",
        // "@typescript-eslint/max-params": ["warn", { max: <n> }],
        "@typescript-eslint/no-array-constructor": "error",
        "@typescript-eslint/no-dupe-class-members": "warn",
        // "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-implied-eval": "error",
        "@typescript-eslint/no-invalid-this": "warn",
        "@typescript-eslint/no-loop-func": "warn",
        "@typescript-eslint/no-loss-of-precision": "error",
        // "@typescript-eslint/no-magic-numbers": "warn",
        "@typescript-eslint/no-redeclare": [
            "warn",
            {
                "builtinGlobals": false
            }
        ],
        // "@typescript-eslint/no-restricted-imports": ["error", "forbidden"],
        "@typescript-eslint/no-shadow": "warn",
        "@typescript-eslint/no-unused-expressions": "warn",
        "@typescript-eslint/no-unused-vars": [
            "warn",
            {
                "args": "none"
            }
        ],
        "@typescript-eslint/no-use-before-define": "warn",
        "@typescript-eslint/no-useless-constructor": "warn",
        "@typescript-eslint/only-throw-error": "warn",
        // "@typescript-eslint/prefer-destructuring": "warn",
        "@typescript-eslint/prefer-promise-reject-errors": "warn",
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/return-await": "error",

        /**
         * last
         * @description: dummy rule, to avoid dealing with trailing commas above
         */
        "": "off"
    }
}